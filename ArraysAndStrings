Question 1.1: Implement an algorithm to determine if a string has all unique characters.
class Main {
  public static void main(String[] args) {
    boolean unique = hasAllUniqueChars("Helo Ward");
    System.out.println(unique);
  }
  
  static boolean hasAllUniqueChars (String inputStr) {
      // assuming ASCII chars
      boolean hasUnique = true;
      // using a helper look up data structure to store chars already existing
      boolean[] chars = new boolean[256];
      for (int i = 0; i < inputStr.length(); ++i) {
          char c = inputStr.charAt(i);
          if (chars[c]) {
              hasUnique = false;
          }
          chars[c] = true;
      }
      
      return hasUnique;
  }
}

class Main {
  public static void main(String[] args) {
    boolean unique = hasUniqueChars("abcdefghijklmnopqrstuvwxyza");
    System.out.println(unique);
  }
  // assume characters are between a and z
  static boolean hasUniqueChars (String inputStr) {
      int checker = 0;
      for (int i = 0; i < inputStr.length(); ++i) {
          int val = inputStr.charAt(i) - 'a';
          if ((checker & (1 << val)) > 0) {
              return false;
          }
          checker |= 1 << val;
      }
      return true;
  }
}

Question 1.2: Implement a function void reverse(char* str) in C or C++ which reverses a null-terminated string.
#include <iostream>
using namespace std;
void reverseString (char*);

int main()
{
   char str[] = "abcdefg"; // the char* str = "..." declaration is obsolete, causing segmentation core dump error
   reverseString(str);
   cout << str << endl; 
   return 0;
}

void reverseString (char *str) {
    char *end = str;
  
    if (str) {
        while (*end) {
            ++end;
        }
        --end;
    
        while (str < end) {
            char temp = *str;
            *str++ = *end;
            *end-- = temp;
        }
    }
}

Question 1.3: Given two strings, write a method to decide if one is a permutation of the other.
class Main {
  public static void main(String[] args) {
      String str1 = "doweepg";
      String str2 = "godweep"; 
      
      System.out.println(isPerm(str1, str2));
  }
  static boolean isPerm (String str1, String str2) {
      // sort the string by chars and then compare the sorted strings
      if (str1.length() != str2.length()) {
          return false;
      } else {
          return sort(str1).equals(sort(str2));
      }
  }
  
  static String sort (String str) {
      char[] charAry = str.toCharArray();
      java.util.Arrays.sort(charAry);
      return new String(charAry);
  }
}

// assume all ASCII symbols
class Main {
  public static void main(String[] args) {
      String str1 = "sdoweepga";
      String str2 = "gsodweeps"; 
      
      System.out.println(isPerm(str1, str2));
  }
  static boolean isPerm (String str1, String str2) {
      // sort the string by chars and then compare the sorted strings
      if (str1.length() != str2.length()) {
          return false;
      } else {
          int[] charCounts = new int[256];
          // init the array
          for (int i: charCounts) {
              i = 0;
          }
          
          char[] str1Ary = str1.toCharArray();
          for (char c: str1Ary) {
              ++charCounts[(int)c];
          }
          
          for (int i = 0; i < str2.length(); ++i) {
              int c = (int) str2.charAt(i);
              --charCounts[c];
              if (charCounts[c] < 0) {
                  return false;
              }
          }
          return true;
      }
  }
}

Questions 1.4: Write a method to replace all spaces in a string with '%20'. You may assume that the
string has sufficient space at the end of the string to hold the additional characters,
and that you are given the "true" length of the string.

class Main {
  public static void main(String[] args) {
      char[] input = "My name is Emily".toCharArray();
      char[] str = new char[100];
      
      for (int i = 0; i < input.length; ++i) {
          str[i] = input[i];
      }
      
      replaceSpace(str, input.length);
      
      System.out.println(new String(str));
  }
  
  // use char array to represent string because char array is mutable so in-place replacement is possible
  static void replaceSpace (char[] str, int length) {
      int spaceLength = 0, newLength, curIndex, i;
      for (i = 0; i < length; ++i) {
          if (str[i] == ' ') {
              ++spaceLength;
          } 
      }
      newLength = length + 2 * spaceLength;
      curIndex = newLength - 1;
      for (i = length - 1; i >= 0; --i) {
          if (str[i] == ' ') {
              str[curIndex--] = '0';
              str[curIndex--] = '2';
              str[curIndex--] = '%';
          } else {
              str[curIndex--] = str[i];
          }
      }
  }
}

Question 1.5: Implement a method to perform basic string compression using the counts of
repeated characters. For example, the string aabcccccaaa would become
a2blc5a3. If the "compressed" string would not become smaller than the original
string, your method should return the original string.

class Main {
  public static void main(String[] args) {
    String input = "Hellllllllllllooooo"; // H1e1l12o5
    String output = compressString(input);
    System.out.println(output);
  }
  
  static String compressString (String str) {
      if (compressionSize(str) >= str.length()) {
          return str;
      }
      
      int count = 1;
      StringBuffer newStr = new StringBuffer();
      char last = str.charAt(0);
      
      
      for (int i = 1; i < str.length(); ++i) {
          if (last == str.charAt(i)) {
              ++count;
          } else {
              newStr.append(last);
              newStr.append(count);
              count = 1; 
              last = str.charAt(i);
          }
      }
      
      newStr.append(last);
      newStr.append(count);
      return newStr.toString();
  }
  
  static int compressionSize (String str) {

      if (str == null || str.isEmpty()) {
          return 0;
      }
      
      int size = 0, count = 1;
      char last = str.charAt(0);
      for (int i = 1; i < str.length(); ++i) {
          if (last == str.charAt(i)) {
              ++count;
          } else {
              size += 1 + String.valueOf(count).length();
              last = str.charAt(i);
              count = 1;
          }
      }
      size += 1 + String.valueOf(count).length();
      return size;
  }
}

Question 1.6: Given an image represented by an NxN matrix, where each pixel in the image is 4 
bytes, write a method to rotate the image by 90 degrees. Can you do this in place?

class Main {
  public static void main(String[] args) {
      int[][] matrix = {
            {1, 2, 3, 4},
            {5, 6, 7, 8},
            {9, 10, 11, 12},
            {13, 14, 15, 16}
          };
      int length = 4;
      rotate90(matrix, length);
      printMatrix(matrix, length);
  }
  
  static void rotate90 (int[][] matrix, int n) {
      // start rotating from the outermost layer
      int nbrOfLayers = n / 2;
      for (int layer = 0; layer < nbrOfLayers; ++layer) {
          int firstIndex = layer;
          int lastIndex = n - 1 - layer;
          
          for (int i = firstIndex; i < lastIndex; ++i) {
              int offset = i - firstIndex;
              // save remaining top-left number
              int topLeft = matrix[firstIndex][i];
              // top-left <-- bottom-left
              matrix[firstIndex][i] = matrix[lastIndex - offset][firstIndex];
              // bottom-left <-- bottom-right
              matrix[lastIndex - offset][firstIndex] = matrix[lastIndex][lastIndex - offset];
              // bottom-right <-- top-right
              matrix[lastIndex][lastIndex - offset] = matrix[i][lastIndex];
              // top-right <-- top-left
              matrix[i][lastIndex] = topLeft;
              
          }
      }
  }
  
  static void printMatrix (int[][] matrix, int n) {
      for (int i = 0; i < matrix.length; ++i) {
          for (int j = 0; j < matrix[i].length; ++j) {
              System.out.print(matrix[i][j] + " ");
          }
          System.out.println();
      }
  }
}

Question 1.7: Write an algorithm such that if an element in an MxN matrix is 0, its entire row and
column are set to 0

class Main {
  public static void main(String[] args) {
      int[][] m = {
          {1, 2, 3, 5},
          {0, 2, 3, 4},
          {1, 2, 3, 4}
      };
     
      setZeros(m);
      printMatrix(m);
  }
 
  static void setZeros (int[][] matrix) {
      boolean[] rows = new boolean[matrix.length];
      boolean[] cols = new boolean[matrix[0].length];
     
      for (int i = 0; i < matrix.length; ++i) {
          for (int j = 0; j < matrix[0].length; ++j) {
              if (matrix[i][j] == 0) {
                  rows[i] = true;
                  cols[j] = true;
              }
          }
      }
     
      for (int i = 0; i < matrix.length; ++i) {
          for (int j = 0; j < matrix[0].length; ++j) {
              if (rows[i] || cols[j]) {
                  matrix[i][j] = 0;
              }
          }
      }
     
  }
 
  static void printMatrix(int[][] matrix) {
      for (int i = 0; i < matrix.length; ++i) {
          for (int j = 0; j < matrix[0].length; ++j) {
              System.out.print(matrix[i][j] +  " ");
          }
          System.out.println();
      }
  }
}

Question 1.8: Assume you have a method isSubstring which checks if one word is a substring
of another. Given two strings, si and s2, write code to check Ifs2 is a rotation of si
using only onecalltoisSubstring (e.g., "waterbottLe" is a rotation of "erbottLewat").

class Main {
  public static void main(String[] args) {
    String s1 = "WaterBottles";
    String s2= "erBottlesWat";
    
    System.out.println(isRotation(s1, s2));
  }
  
  static boolean isRotation (String s1, String s2) {
      if (s1.length() == s2.length() & s1.length() > 0) {
          String s1s1 = s1 + s1;
          return isSubstring(s1s1, s2);
      }
      
      return false;
  }
  
  static boolean isSubstring (String s1, String s2) {
      return s1.indexOf(s2) > -1;
  }
}
